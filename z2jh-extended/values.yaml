# Helm documentation regarding values.yaml files
# https://docs.helm.sh/chart_template_guide/#values-files

# Helm documentation regarding overriding a subcharts values
# https://docs.helm.sh/chart_template_guide/#overriding-values-from-a-parent-chart

# Internal JupyterHub service
# http://jupyterhub.readthedocs.io/en/latest/reference/services.html
# RELATED:
#   assistant.py in the extended hub image
#   values.yaml: 
#     assistant
#     jupyterhub.hub.extraConfig
#     jupyterhub.hub.extraConfigMap
# assistant:
#   # NOTE: needs to be set in the extraConfigMap as well
#   enabled: true

# External service instead?
assistant:
  enabled: false
  image:
    name: eu.gcr.io/jupyter-se/assistant
    tag: autoscaling-01
  storage: 1Gi
  resources:
    requests:
      cpu: 0.1
      memory: 100Mi

nfsServer:
  enabled: false
  image:
    name: eu.gcr.io/jupyter-se/nfs-server
    tag: 9c0fdaf
  storage: 10Gi
  resources:
    requests:
      cpu: 1
      memory: 2Gi

# JupyterHub subchart override
jupyterhub:
  hub:
    service:
      type: ClusterIP
    baseUrl: /
    ### cookieSecret OVERRIDDEN in secret-values.yaml
    cookieSecret:
    publicURL:
    uid: 1000
    fsGid: 100
    nodeSelector: {}
    concurrentSpawnLimit: 64
    activeServerLimit:
    db:
      type: sqlite-pvc
      upgrade:
      pvc:
        annotations: {}
        selector: {}
        accessModes:
          - ReadWriteOnce
        storage: 1Gi
        subPath:
        storageClassName:
      url:
    labels: {}
    ### extraConfig MODIFIED
    extraConfig: |
      # Useful functions duplicated from z2jh/images/hub/jupyterhub_config.py
      # See https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/374
      # -----------------------------------------------------------------------
      import os
      import z2jh

      # -----------------------------------------------------------------------

      # assistant hub EXTERNAL service --- bad idea, go external...
      # it seems like jupyterhub's ip routing cant handle k8s complexity
      # http://jupyterhub.readthedocs.io/en/latest/reference/services.html
      # -----------------------------------------------------------------------
      # import socket
      # pod_ip = socket.gethostbyname(socket.gethostname())
      # service_ip = os.environ["HUB_SERVICE_HOST"]

      # if z2jh.get_config('custom.assistant.enabled', False):
      #   c.JupyterHub.services.append({
      #       'name': 'assistant',
      #       'url': 'http://assistant.prod.svc.cluster.local:80'.format(pod_ip),
      #   })
      # -----------------------------------------------------------------------

      # assistant hub internal service --- bad idea, go external...
      # it seems like jupyterhub's ip routing cant handle k8s complexity
      # http://jupyterhub.readthedocs.io/en/latest/reference/services.html
      # -----------------------------------------------------------------------
      # import socket
      # pod_ip = socket.gethostbyname(socket.gethostname())
      # service_ip = os.environ["HUB_SERVICE_HOST"]

      # if z2jh.get_config('custom.assistant.enabled', False):
      #   c.JupyterHub.services.append({
      #       'name': 'assistant',
      #       'admin': True,
      #       'url': 'http://{}:8090'.format(pod_ip),
      #       'command': ['flask', 'run', '--port=8090'],
      #       'environment': {
      #           'FLASK_APP': '/usr/local/bin/whoami.py',
      #       }
      #   })
      # -----------------------------------------------------------------------

      # Other
      # FIXME: Support setting affinity directly in KubeSpawner
      c.KubeSpawner.singleuser_extra_pod_config = {
          'affinity': {
              'podAffinity': {
                  'preferredDuringSchedulingIgnoredDuringExecution': [{
                      'weight': 50,
                      'podAffinityTerm': {
                          'labelSelector': {
                              'matchExpressions': [{
                                  'key': 'component',
                                  'operator': 'In',
                                  'values': ['hub']
                              }]
                          },
                          'topologyKey': 'kubernetes.io/hostname'
                      }
                  }, {
                      'weight': 5,
                      'podAffinityTerm': {
                          'labelSelector': {
                              'matchExpressions': [{
                                  'key': 'component',
                                  'operator': 'In',
                                  'values': ['singleuser-server']
                              }]
                          },
                          'topologyKey': 'kubernetes.io/hostname'
                      }
                  }],
              }
          }
      }


      # Auth
      from oauthenticator.microsoft import MicrosoftOAuthenticator
      class LearnetAuthenticator(MicrosoftOAuthenticator):  
          from tornado import gen

          @gen.coroutine
          def pre_spawn_start(self, user, spawner):
              auth_state = yield user.get_auth_state()
              if not auth_state:
                  return


              # USER ROLE
              if str(auth_state['microsoft_user']['jobTitle']) == 'LÃ¤rare':
                edu_role = 'instructor'
              elif str(auth_state['microsoft_user']['jobTitle']) == 'Elev':
                edu_role = 'student'
              else:
                edu_role = 'unknown'


              # ENV
              spawner.environment['AUTH_USERNAME'] = str(user.name)
              spawner.environment['AUTH_ACCESS_TOKEN'] = str(auth_state['access_token'])
              spawner.environment['AUTH_ID'] = str(auth_state['microsoft_user']['id'])
              spawner.environment['AUTH_USER_PRINCIPAL_NAME'] = str(auth_state['microsoft_user']['userPrincipalName'])
              spawner.environment['AUTH_DISPLAY_NAME'] = str(auth_state['microsoft_user']['displayName'])
              spawner.environment['AUTH_GIVEN_NAME'] = str(auth_state['microsoft_user']['givenName'])
              spawner.environment['AUTH_SURNAME'] = str(auth_state['microsoft_user']['surname'])
              spawner.environment['AUTH_MAIL'] = str(auth_state['microsoft_user']['mail'])
              spawner.environment['AUTH_MOBILE_PHONE'] = str(auth_state['microsoft_user']['mobilePhone'])
              spawner.environment['AUTH_BUSINESS_PHONES'] = str(auth_state['microsoft_user']['businessPhones'])
              spawner.environment['AUTH_JOB_TITLE'] = str(auth_state['microsoft_user']['jobTitle'])
              spawner.environment['AUTH_OFFICE_LOCATION'] = str(auth_state['microsoft_user']['officeLocation'])
              spawner.environment['AUTH_PREFERRED_LANGUAGE'] = str(auth_state['microsoft_user']['preferredLanguage'])
              spawner.environment['EDU_ROLE'] = edu_role


              # LABELS
              # c.KubeSpawner.singleuser_extra_labels = z2jh.get_config('singleuser.extra-labels', {})
              spawner.singleuser_extra_labels['edu-role'] = edu_role
              spawner.user_storage_extra_labels['edu-role'] = edu_role


              # JUPYTERLAB
              c.Spawner.default_url = '/lab'


              # ANNOTATIONS
              # - School info?
              # config c.KubeSpawner.singleuser_extra_annotations = Dict()


              # HOOKS
              # These hooks can run before, during or after the docker image entrypoint
              # https://github.com/jupyterhub/kubespawner/blob/master/kubespawner/spawner.py#L613
              # spawner.singleuser_lifecycle_hooks = {
              #   'postStart': {
              #     'exec': {
              #       'command': ['/bin/sh', '-c', 'echo Hello Im $(whoami) from the postStart handler > /home/jovyan/message']
              #     }
              #   }
              # }


              # ENTRYPOINT (kubernetes terminology: command)
              # Kubespawner does not allow you to change this.
              # The jupyter/docker-stacks images default entrypoint is...
              # ENTRYPOINT ["tini", "--"]
              # https://github.com/jupyter/docker-stacks
              # 
              # Read more of why you want tini at...
              # https://github.com/krallin/tini/issues/8

              # CMD (kubernetes terminology: args)
              # spawner.cmd = ['start-notebook.sh']


              # IDEA: Set this to None and allow the dockerfile entrypoint
              #       solve some permissions details first!

              # TODO: figre out if setting these differently based on the user
              # could eliminate the need to create multiple images.
              # - https://github.com/jupyterhub/kubespawner/issues/18#issuecomment-272633065

              # TODO: Switch user from script? Perhaps no need...
              # exec ... https://unix.stackexchange.com/a/163896/257111


              # USER / GROUP
              # EXPLANATION: This UID overrides the Dockerfiles USER value
              # spawner.singleuser_uid = 1000
              # EXPLANATION: This GID is set to own the mounted volumes
              # spawner.singleuser_fs_gid = 100


              # IMAGE
              # c.KubeSpawner.singleuser_image_spec = os.environ['SINGLEUSER_IMAGE']              
              # TODO: figure out how to set this properly

              # VOLUME / MOUNT
              # WARNING: Adjusting these will lead to consequenses for future pods it hink
              # c.KubeSpawner.volumes.extend(z2jh.get_config('singleuser.storage.extra-volumes', []))
              # spawner.volumes = spawner.volumes.extend([
              #   {
              #     'name': 'volume-nbgrader',
              #     'persistentVolumeClaim': {
              #       'claimName': 'nfs-pvc'
              #     }
              #   }
              # ])

              # c.KubeSpawner.volume_mounts.extend(z2jh.get_config('singleuser.storage.extra-volume-mounts', []))
              # spawner.volumeMounts = spawner.volumeMounts.extend([
              #   {
              #     'name': 'volume-nbgrader',
              #     'mountPath': '/srv/nbgrader/exchange',
              #     'subPath': None
              #   }
              # ])
              

              # - extra_container_config:
              #   Extra configuration (e.g. envFrom) for notebook container which is not covered by parameters above.
              # - extra_pod_config:
              #   Extra configuration (e.g. tolerations) for pod which is not covered by parameters above.


      c.JupyterHub.authenticator_class = LearnetAuthenticator
      # Import auth-information from extraConfigMap set in secret-values.yaml
      c.MicrosoftOAuthenticator.client_id = z2jh.get_config('custom.client-id')
      c.MicrosoftOAuthenticator.client_secret = z2jh.get_config('custom.client-secret')
      c.MicrosoftOAuthenticator.oauth_callback_url = z2jh.get_config('custom.callback-url')
      c.MicrosoftOAuthenticator.hosted_domain = z2jh.get_config('custom.hosted-domain')
      c.MicrosoftOAuthenticator.login_service = z2jh.get_config('custom.login-service')
      email_domain = z2jh.get_config('custom.hosted-domain')
    ### extraConfigMap auth details ADDED TO in secret-values.yaml
    # client-id:
    # client-secret:
    # callback-url:
    # hosted-domain:
    # login-service:
    extraConfigMap: {}
    ### extraEnv OVERRIDDEN in secret-values.yaml
    extraEnv: {}
    extraContainers: []
    extraVolumes: []
    extraVolumeMounts: []
    # image WRITTEN by ../build.py
    image:
      name: eu.gcr.io/jupyter-se/hub
      tag: pr-502-completed
    resources:
      requests:
        cpu: 0.2
        memory: 512Mi
    services:
      assistant:
        name: assistant
        # FIXME: the namespace (prod) is hardcoded!
        url: http://assistant.prod.svc.cluster.local
        ### apiToken  OVERRIDDEN in secret-values.yaml
        apiToken:
    imagePullPolicy: IfNotPresent
    pdb:
      enabled: true

  rbac:
    enabled: true

  proxy:
    ### secretToken OVERRIDDEN in secret-values.yaml
    secretToken: ''
    service:
      type: LoadBalancer
      labels: {}
      annotations: {}
      nodePorts:
        http:
        https:
    chp:
      image:
        name: jupyterhub/configurable-http-proxy
        tag: 3.0.0
        pullPolicy: IfNotPresent
      cmd:
        - configurable-http-proxy
        - --ip=0.0.0.0
        - --port=8000
        - --api-ip=0.0.0.0
        - --api-port=8001
        - --default-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
        - --error-target=http://$(HUB_SERVICE_HOST):$(HUB_SERVICE_PORT)
        - --log-level=debug
      resources:
        requests:
          cpu: 0.2
          memory: 512Mi
    nginx:
      image:
        name: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
        tag: 0.9.0
        pullPolicy: IfNotPresent
      proxyBodySize: 64m
      resources: {}
    lego:
      image:
        name: jetstack/kube-lego
        # We need a couple of fixes related to ingress.provider that are in master
        # When 0.1.6 is released, switch to that!
        tag: master-2368
      resources: {}
    labels:
    nodeSelector: {}
    pdb:
      enabled: true
    https:
      enabled: true
      type: letsencrypt
      letsencrypt:
        ### contactEmail OVERRIDDEN in secret-values.yaml
        contactEmail: ''
      manual:
        key:
        cert:
      ### hosts OVERRIDDEN in secret-values.yaml
      hosts: []


  # Google OAuth secrets
  auth:
    type: dummy
    whitelist:
      users:
    admin:
      access: true
      users:
        - erik.sundell ### MODIFIED
    dummy:
      password:
    state:
      ### enabled MODIFIED from false
      enabled: true
      ### cryptoKeys OVERRIDDEN in secret-values.yaml
      cryptoKey:

  singleuser:
    networkTools:
      image:
        name: jupyterhub/k8s-network-tools
        tag: v0.6
    cloudMetadata:
      enabled: false
      ip: 169.254.169.254
    extraLabels: {}
    extraEnv: {}
    lifecycleHooks:
    initContainers:
    nodeSelector: {}
    # uid is adjusted by custom authenticators pre_spawn_start hook
    uid: 1000
    # fsGid is adjusted by the custom authenticators pre_spawn_start hook
    fsGid: 100
    serviceAccountName:
    # schedulerStrategy MODIFIED from default blank (defaults to 'spread')
    schedulerStrategy: pack
    storage:
      type: dynamic
      ### extraVolumes is adjusted by custom authenticators pre_spawn_start hook
      ### extraVolumes MODIFIED
      extraVolumes:
        - name: getting-started
          gitRepo:
            repository: https://github.com/consideRatio/jupyter-se-getting-started.git
      # - name: nbgrader
      #   persistentVolumeClaim:
      #     claimName: nfs-pvc
      ### extraVolumeMounts is adjusted by custom authenticators pre_spawn_start hook
      ### extraVolumeMounts MODIFIED
      extraVolumeMounts:
        - name: getting-started
          mountPath: /home/jovyan/jupyter-se-getting-started
          subPath: jupyter-se-getting-started
      # - name: nbgrader
      #   mountPath: /srv/nbgrader/exchange
      static:
        pvcName:
        subPath: '{username}'
      ### capacity MODIFIED from 10Gi
      capacity: 256Mi
      homeMountPath: /home/jovyan
      dynamic:
        storageClass:
    # image WRITTEN by ../build.py
    image:
      name: eu.gcr.io/jupyter-se/singleuser
      tag: pr-502-completed
    startTimeout: 300
    cpu:
      limit: 2
      ### guarantee MODIFIED from
      ### Allows for 6 users on 1 n1-standard-4 google machine
      ### Allows for 8 additional users for every n1-standard-4 google machine
      guarantee: 0.445
    memory:
      limit: 1G
      ### guarantee MODIFIED from 1G
      guarantee: 1G
    cmd: start
    defaultUrl:

  prePuller:
    hook:
      enabled: true
      extraEnv: {}
      image:
        # name: jupyterhub/k8s-pre-puller
        # tag: v0.6
        name: eu.gcr.io/jupyter-se/image-awaiter
        tag: pr-502-completed
    continuous:
      enabled: true
    pause:
      image:
        name: gcr.io/google_containers/pause
        tag: '3.0'

  ingress:
    enabled: false
    annotations: {}
    hosts: []
    tls:

  cull:
    enabled: true
    users: false
    ### timeout MODIFIED from 3600
    timeout: 3600
    ### every MODIFIED from 600
    every: 600

