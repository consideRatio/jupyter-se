# Helm documentation regarding values.yaml files
# https://docs.helm.sh/chart_template_guide/#values-files

# Helm documentation regarding overriding a subcharts values
# https://docs.helm.sh/chart_template_guide/#overriding-values-from-a-parent-chart

# JupyterHub subchart override
jupyterhub:
  hub:
    nodeSelector: {}
    ### cookieSecret OVERRIDDEN in secret-values.yaml
    cookieSecret:
    ### extraConfig MODIFIED
    extraConfig:
      auth: |
        from z2jh import get_config, get_secret, set_config_if_not_none

        # Auth
        from oauthenticator.microsoft import MicrosoftOAuthenticator
        class LearnetAuthenticator(MicrosoftOAuthenticator):  
            from tornado import gen

            @gen.coroutine
            def pre_spawn_start(self, user, spawner):
                auth_state = yield user.get_auth_state()
                if not auth_state:
                    return


                # USER ROLE
                if str(auth_state['microsoft_user']['jobTitle']) == 'LÃ¤rare':
                  edu_role = 'instructor'
                elif str(auth_state['microsoft_user']['jobTitle']) == 'Elev':
                  edu_role = 'student'
                else:
                  edu_role = 'unknown'


                # ENV
                spawner.environment['AUTH_USERNAME'] = str(user.name)
                spawner.environment['AUTH_ACCESS_TOKEN'] = str(auth_state['access_token'])
                spawner.environment['AUTH_ID'] = str(auth_state['microsoft_user']['id'])
                spawner.environment['AUTH_USER_PRINCIPAL_NAME'] = str(auth_state['microsoft_user']['userPrincipalName'])
                spawner.environment['AUTH_DISPLAY_NAME'] = str(auth_state['microsoft_user']['displayName'])
                spawner.environment['AUTH_GIVEN_NAME'] = str(auth_state['microsoft_user']['givenName'])
                spawner.environment['AUTH_SURNAME'] = str(auth_state['microsoft_user']['surname'])
                spawner.environment['AUTH_MAIL'] = str(auth_state['microsoft_user']['mail'])
                spawner.environment['AUTH_MOBILE_PHONE'] = str(auth_state['microsoft_user']['mobilePhone'])
                spawner.environment['AUTH_BUSINESS_PHONES'] = str(auth_state['microsoft_user']['businessPhones'])
                spawner.environment['AUTH_JOB_TITLE'] = str(auth_state['microsoft_user']['jobTitle'])
                spawner.environment['AUTH_OFFICE_LOCATION'] = str(auth_state['microsoft_user']['officeLocation'])
                spawner.environment['AUTH_PREFERRED_LANGUAGE'] = str(auth_state['microsoft_user']['preferredLanguage'])
                spawner.environment['EDU_ROLE'] = edu_role

                spawner.environment['NBGITPULLER_APP'] = 'lab'


                # LABELS
                # c.KubeSpawner.extra_labels = get_config('singleuser.extra-labels', {})
                spawner.extra_labels['edu-role'] = edu_role
                spawner.storage_extra_labels['edu-role'] = edu_role


                # HOOKS
                # These hooks can run before, during or after the docker image entrypoint
                # https://github.com/jupyterhub/kubespawner/blob/master/kubespawner/spawner.py#L613
                # spawner.lifecycle_hooks = {
                #   'postStart': {
                #     'exec': {
                #       'command': ['/bin/sh', '-c', 'echo Hello Im $(whoami) from the postStart handler > /home/jovyan/message']
                #     }
                #   }
                # }


        c.JupyterHub.authenticator_class = LearnetAuthenticator
        # Import auth-information from extraConfigMap set in secret-values.yaml
        c.MicrosoftOAuthenticator.client_id = get_config('custom.client-id')
        c.MicrosoftOAuthenticator.client_secret = get_config('custom.client-secret')
        c.MicrosoftOAuthenticator.oauth_callback_url = get_config('custom.callback-url')
        c.MicrosoftOAuthenticator.hosted_domain = get_config('custom.hosted-domain')
        c.MicrosoftOAuthenticator.login_service = get_config('custom.login-service')
        email_domain = get_config('custom.hosted-domain')

        # c.KubeSpawner.extra_pod_config.update(get_config('scheduling.singleuser-tolerations'))
        # c.KubeSpawner.extra_pod_config.update(get_config('scheduling.singleuser-affinity'))

### extraConfigMap auth details ADDED TO in secret-values.yaml
# client-id:
# client-secret:
# callback-url:
# hosted-domain:
# login-service:
    extraConfigMap: {}
    ### extraEnv OVERRIDDEN in secret-values.yaml
    extraEnv: {}
    # image WRITTEN by ../build.py
    image:
      name: eu.gcr.io/jupyter-se/hub
      tag: canary-025

  proxy:
    nodeSelector: {}
    ### secretToken OVERRIDDEN in secret-values.yaml
    secretToken: ''
    https:
      enabled: true
      type: letsencrypt
      letsencrypt:
        ### contactEmail OVERRIDDEN in secret-values.yaml
        contactEmail: ''
      ### hosts OVERRIDDEN in secret-values.yaml
      hosts: []
    chp:
      resources:
        requests:
          ### cpu MODIFIED from 0.2
          cpu: 100m
          memory: 512Mi


  auth:
    type: dummy
    whitelist:
      users:
    admin:
      access: true
      users:
        - erik.sundell ### MODIFIED
    dummy:
      password:
    state:
      ### enabled MODIFIED from false
      enabled: true
      ### cryptoKeys OVERRIDDEN in secret-values.yaml
      cryptoKey:


  singleuser:
    networkTools:
      image:
        # tag MODIFIED manually, picking latest tag from https://hub.docker.com/r/jupyterhub/k8s-network-tools/tags/
        name: jupyterhub/k8s-network-tools
        tag: 36a8dcb
    # schedulerStrategy MODIFIED from default blank (defaults to 'spread')
    schedulerStrategy: pack
    storage:
      type: dynamic
      ### extraVolumes is adjusted by custom authenticators pre_spawn_start hook
      ### extraVolumes MODIFIED
      extraVolumes:
        - name: getting-started
          gitRepo:
            repository: https://github.com/consideRatio/jupyter-se-getting-started.git
      # - name: nbgrader
      #   persistentVolumeClaim:
      #     claimName: nfs-pvc
      ### extraVolumeMounts is adjusted by custom authenticators pre_spawn_start hook
      ### extraVolumeMounts MODIFIED
      extraVolumeMounts:
        - name: getting-started
          mountPath: /home/jovyan/jupyter-se-getting-started
          subPath: jupyter-se-getting-started
      # - name: nbgrader
      #   mountPath: /srv/nbgrader/exchange
      ### capacity MODIFIED from 10Gi
      capacity: 256Mi
    # image WRITTEN by ../build.py
    image:
      name: eu.gcr.io/jupyter-se/singleuser
      tag: canary-025
    cpu:
      limit: 2
      ### guarantee MODIFIED from
      ### Allows for 6 users on 1 n1-standard-4 google machine
      ### Allows for 8 additional users for every n1-standard-4 google machine
      guarantee: 0.8
    memory:
      limit: 1G
      ### guarantee MODIFIED from 1G
      guarantee: 1G
    ### cmd MODIFIED from jupyterhub-singleuser
    cmd: start
    ### defaultUrl MODIFIED from blank
    defaultUrl: /lab


  prePuller:
    hook:
      enabled: true
      image:
        name: jupyterhub/k8s-image-awaiter
        # tag MODIFIED manually, picking latest tag from https://hub.docker.com/r/jupyterhub/k8s-image-awaiter/tags/
        tag: 01eac78
    continuous:
      enabled: true


  cull:
    enabled: true
    users: false
    ### timeout MODIFIED from 3600
    timeout: 3600
    ### every MODIFIED from 600
    every: 600





### EXPERIMENTAL STUFF NOT IN USE
# -------------------------------

# from extra config...
# assistant: |
  # import os
  # import z2jh
  # -----------------------------------------------------------------------
  # assistant hub EXTERNAL service
  # it seems like jupyterhub's ip routing cant handle k8s complexity
  # http://jupyterhub.readthedocs.io/en/latest/reference/services.html
  # -----------------------------------------------------------------------
  # import socket
  # pod_ip = socket.gethostbyname(socket.gethostname())
  # service_ip = os.environ["HUB_SERVICE_HOST"]
  #
  # if get_config('custom.assistant.enabled', False):
  #   c.JupyterHub.services.append({
  #       'name': 'assistant',
  #       'url': 'http://assistant.prod.svc.cluster.local:80'.format(pod_ip),
  #   })
        # -----------------------------------------------------------------------


# Internal JupyterHub service
# http://jupyterhub.readthedocs.io/en/latest/reference/services.html
# RELATED:
#   assistant.py in the extended hub image
#   values.yaml: 
#     assistant
#     jupyterhub.hub.extraConfig
#     jupyterhub.hub.extraConfigMap
# assistant:
#   # NOTE: needs to be set in the extraConfigMap as well
#   enabled: true

  # services:
  #   assistant:
  #     name: assistant
  #     # FIXME: the namespace (prod) is hardcoded!
  #     url: http://assistant.prod.svc.cluster.local
  #     ### apiToken  OVERRIDDEN in secret-values.yaml
  #     apiToken:

# External service instead?
assistant:
  enabled: false
  image:
    name: eu.gcr.io/jupyter-se/assistant
    tag: autoscaling-01
  storage: 1Gi
  resources:
    requests:
      cpu: 100m
      memory: 100Mi

nfsServer:
  enabled: false
  image:
    name: eu.gcr.io/jupyter-se/nfs-server
    tag: 9c0fdaf
  storage: 10Gi
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
